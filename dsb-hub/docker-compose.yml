services:
  gitea:
    image: gitea/gitea:latest
    container_name: gitea
    environment:
      - USER_UID=1000
      - USER_GID=1000
      # Configure Gitea for subpath access. Replace 131.186.56.105 with your dsb-hub IP or hostname.
      - GITEA__server__ROOT_URL=http://131.186.56.105/gitea/
      - GITEA__database__DB_TYPE=sqlite3
    volumes:
      - gitea_data:/data
    ports:
      - "3000:3000"
      - "222:22"
    networks:
      - devsecops

  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    user: root
    environment: # Add environment section for Jenkins
      - JENKINS_OPTS=--prefix=/jenkins # Configure Jenkins for /jenkins subpath
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
      - "50000:50000"
    networks:
      - devsecops

  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://sonarqube-db:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_WEB_CONTEXT=/sonarqube # Configure SonarQube for /sonarqube subpath
      # Disable Elasticsearch bootstrap checks for development/testing if memory is constrained.
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
      - SONAR_JDBC_PASSWORD=sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"
    networks:
      - devsecops

  sonarqube-db:
    image: postgres:13
    container_name: sonarqube-db
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - sonarqube_db:/var/lib/postgresql/data
    networks:
      - devsecops

  nexus:
    image: sonatype/nexus3:latest
    container_name: nexus
    # If you encounter "exec format error" on your ARM64 dsb-hub, uncomment the line below.
    platform: linux/arm64
    # Note: Nexus subpath configuration is more complex and usually involves editing nexus.properties or setting specific Java opts.
    volumes:
      - nexus_data:/nexus-data
    ports:
      - "8081:8081"
    networks:
      - devsecops
 
  snyk:
    image: snyk/snyk:golang # General purpose Snyk CLI image
    container_name: snyk
    restart: unless-stopped
    environment:
      # IMPORTANT: Set your SNYK_TOKEN.
      # You can set this directly, or use an .env file and reference it as ${SNYK_TOKEN}
      - SNYK_TOKEN=YOUR_SNYK_TOKEN_HERE
    volumes:
      - snyk_cache:/home/node/.cache # Snyk and other tools might use this
      - /var/run/docker.sock:/var/run/docker.sock # For Snyk to scan Docker images on the host
      # Example: Mount a directory with your code to scan it
      # - ./my-project-to-scan:/mnt/app
    working_dir: /mnt # Default directory when you exec into the container
    # Keep the container running so you can exec into it
    command: tail -f /dev/null
    networks:
      - devsecops

  nginx:
    image: nginx:latest
    container_name: nginx_hub
    ports:
      - "80:80"
      # - "443:443" # Optionally, if you set up SSL
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # - ./nginx/ssl:/etc/nginx/ssl:ro # Optionally, for SSL certificates
    depends_on:
      - gitea
      - jenkins
      - sonarqube
      - nexus
      - snyk # Updated dependency
    networks:
      - devsecops
    restart: unless-stopped

networks:
  devsecops:
    driver: bridge

volumes:
  gitea_data:
  jenkins_home:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_db:
  nexus_data:
  snyk_cache: