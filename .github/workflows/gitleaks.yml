name: Secret Scan

on: [push, pull_request]

permissions: # Added: Define permissions for the workflow
  contents: read # Required for actions/checkout
  security-events: write # Required for github/codeql-action/upload-sarif

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Consider fetch-depth: 0 if you want gitleaks to scan full history (though your current command uses --no-git)

      - name: Install Gitleaks
        env:
          GITLEAKS_VERSION: v8.18.1 # Pin Gitleaks version (same as your pre-commit)
        run: |
          set -e # Exit immediately if a command exits with a non-zero status
          set -x # Print commands and their arguments as they are executed

          echo "Using GITLEAKS_VERSION: '${GITLEAKS_VERSION}'"

          if [[ ! "${GITLEAKS_VERSION}" == v* ]]; then
            echo "::error::GITLEAKS_VERSION (current: '${GITLEAKS_VERSION}') must start with 'v'. Please check the env variable."
            exit 1
          fi

          VERSION_NO_V=$(echo "${GITLEAKS_VERSION}" | sed 's/^v//') # Remove 'v' only from the beginning
          echo "Version without 'v' (VERSION_NO_V): '${VERSION_NO_V}'"

          ASSET_URL="https://github.com/gitleaks/gitleaks/releases/download/${GITLEAKS_VERSION}/gitleaks_${VERSION_NO_V}_linux_x86_64.tar.gz"
          echo "Constructed Asset URL: ${ASSET_URL}"

          curl -fsSL "${ASSET_URL}" -o gitleaks.tar.gz # Added -f to fail fast on HTTP errors
          echo "Gitleaks download command executed." # To confirm curl completed if successful

          tar -xzf gitleaks.tar.gz gitleaks
          rm gitleaks.tar.gz
          chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin/gitleaks
          echo "Gitleaks version:"
          gitleaks version

      - name: Run Gitleaks secret scan
        id: gitleaks # Keep original ID for consistency with the fail step
        run: |
          GITLEAKS_EXIT_CODE=0 # Default to 0 (success)
          gitleaks detect \
            --source=. \
            --no-git \
            --redact \
            --report-format sarif \
            --report-path=gitleaks.sarif \
            || GITLEAKS_EXIT_CODE=$? # Capture non-zero exit code if gitleaks fails or finds secrets

          echo "Gitleaks process exited with code: ${GITLEAKS_EXIT_CODE}"
          echo "exit_code=${GITLEAKS_EXIT_CODE}" >> $GITHUB_OUTPUT

          # Gitleaks should always create gitleaks.sarif if --report-path is given.
          # If it's not there, it's a significant issue. Create a fallback for upload.
          if [ ! -f gitleaks.sarif ]; then
            echo "::error::gitleaks.sarif report was not generated by Gitleaks!"
            # Create a minimal SARIF indicating an error in report generation.
            echo '{
              "version": "2.1.0",
              "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
              "runs": [
                {
                  "tool": { "driver": { "name": "Gitleaks Scan Wrapper" } },
                  "results": [ { "level": "error", "message": { "text": "Gitleaks scan completed (exit code '${GITLEAKS_EXIT_CODE}'), but the SARIF report file (gitleaks.sarif) was not generated." } } ]
                }
              ]
            }' > gitleaks.sarif
            # If GITLEAKS_EXIT_CODE was 0 (gitleaks thought it succeeded but didn't create the file),
            # ensure the build fails by setting a custom error code for the output.
            if [ "${GITLEAKS_EXIT_CODE}" -eq 0 ]; then
              echo "::warning::Gitleaks exited 0 but SARIF report is missing. Overriding output exit code to indicate an error."
              echo "exit_code=99" > $GITHUB_OUTPUT # Custom error code for "report not generated despite gitleaks success"
            fi
          fi

      - name: Upload SARIF report to GitHub Security
        if: always() # Always attempt to upload the report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

      - name: Check Gitleaks scan result
        if: always() # Ensure this check always runs
        run: |
          GITLEAKS_REPORTED_EXIT_CODE="${{ steps.gitleaks.outputs.exit_code }}"
          echo "Interpreting Gitleaks reported exit code: '$GITLEAKS_REPORTED_EXIT_CODE'"

          if [[ "$GITLEAKS_REPORTED_EXIT_CODE" == "1" ]]; then
            echo "❌ Gitleaks detected secrets! See the 'Security' tab for details."
            exit 1
          elif [[ "$GITLEAKS_REPORTED_EXIT_CODE" == "0" ]]; then
            echo "✅ No secrets detected by Gitleaks."
          elif [[ "$GITLEAKS_REPORTED_EXIT_CODE" == "99" ]]; then # Custom code for missing report
            echo "❌ Gitleaks scan ran but failed to generate a report properly."
            exit 1
          else # Includes Gitleaks exit code 2 (error) or any other unexpected non-zero codes
            echo "⚠️ Gitleaks scan finished with an error or unexpected status (exit code: $GITLEAKS_REPORTED_EXIT_CODE). Check Gitleaks logs and the 'Security' tab."
            exit 1
          fi
